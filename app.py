#!/usr/bin/env python
# -*- coding: utf-8 -*-
from bs4 import BeautifulSoup
import requests
import telebot
import datetime
import os
import settings
import core
import sys
import re
import json
import copy
import random
from WeatherManager import WeatherManager
from settings import KEYBOARD
from flask import Flask, request, render_template, jsonify

app = Flask(__name__, template_folder='site', static_folder='site/static', static_url_path='/fl1/static')
bot = telebot.TeleBot(settings.BOT_TOKEN, threaded=True)

keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
keyboard.row(KEYBOARD['TODAY'], KEYBOARD['TOMORROW'], KEYBOARD['FOR_A_WEEK'])
keyboard.row(KEYBOARD['FOR_A_TEACHER'], KEYBOARD['FOR_A_GROUP'])
keyboard.row(KEYBOARD['IN_AUDIENCE'], KEYBOARD['FOR_A_AUDIENCE'], KEYBOARD['HELP'])

emoji_numbers = ['0‚É£', '1‚É£', '2‚É£', '3‚É£', '4‚É£', '5‚É£', '6‚É£', '7‚É£', '8‚É£', '9‚É£']


def get_timetable(faculty='', teacher='', group='', sdate='', edate='', user_id=None):

    http_headers = {
            'User-Agent': settings.HTTP_USER_AGENT,
            'Accept': 'text/html',
    }

    try:
        post_data = {
            'faculty': faculty,
            'teacher': teacher.encode('windows-1251'),
            'group': group.encode('windows-1251'),
            'sdate': sdate,
            'edate': edate,
            'n': 700,
        }
    except Exception as ex:
        core.log(m='–ü–æ–º–∏–ª–∫–∞ –∫–æ–¥—É–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –∑–∞–ø–∏—Ç—É –¥–æ —Å–∞–π—Ç—É –¥–µ–∫–∞–Ω–∞—Ç—É: {}'.format(str(ex)))
        bot.send_message(user_id, '–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É, –≤–∫–∞–∂—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏.', reply_markup=keyboard)
        return False

    if settings.USE_CACHE:
        request_key = 'G:{}|T:{}|SD:{}|ED:{}'.format(group.lower(), teacher, sdate, edate)
        cached_timetable = core.Cache.get_from_cache(request_key)

        if cached_timetable:
            return json.loads(cached_timetable[0][1])

    try:
        page = requests.post(settings.TIMETABLE_URL, post_data, headers=http_headers, timeout=15)
    except Exception as ex:
        core.log(m='–ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è —ñ–∑ —Å–∞–π—Ç–æ–º –¥–µ–∫–∞–Ω–∞—Ç—É: {}'.format(str(ex)))
        if user_id:
            bot.send_message(user_id, '–ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è —ñ–∑ —Å–∞–π—Ç–æ–º –î–µ–∫–∞–Ω–∞—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.', reply_markup=keyboard)
        return False

    parsed_page = BeautifulSoup(page.content, 'html5lib')
    all_days_list = parsed_page.find_all('div', class_='col-md-6')[1:]
    all_days_lessons = []

    for one_day_table in all_days_list:
        all_days_lessons.append({
            'day': one_day_table.find('h4').find('small').text,
            'date': one_day_table.find('h4').text[:5],
            'lessons': [' '.join(lesson.text.split()) for lesson in one_day_table.find_all('td')[2::3]]
        })

    if all_days_lessons and settings.USE_CACHE:  # if timetable exists, put it to cache
        cached_all_days_lessons = copy.deepcopy(all_days_lessons)
        cached_all_days_lessons[0]['day'] += '*'
        _json = json.dumps(cached_all_days_lessons, sort_keys=True, ensure_ascii=False, separators=(',', ':'), indent=2)
        core.Cache.put_in_cache(request_key, _json)

    return all_days_lessons


def render_day_timetable(day_data):

    day_timetable = '.....::::: <b>\U0001F4CB {}</b> - <i>{}</i> :::::.....\n\n'.format(day_data['day'], day_data['date'])

    lessons = day_data['lessons']

    start_index = 0
    end_index = len(lessons) - 1

    for i in range(8):
        if lessons[i]:
            start_index = i
            break

    for i in range(end_index, -1, -1):
        if lessons[i]:
            end_index = i
            break

    timetable = ['9:00 - 10:20', '10:30 - 11:50', '12:10 - 13:30', '13:40 - 15:00',
                 '15:20 - 16:40 ', '16:50 - 18:10', '18:20 - 19:40', '-']
    for i in range(start_index, end_index + 1):
        if lessons[i]:
            day_timetable += '{} <i>{}</i> \n{}\n\n'.format(emoji_numbers[i+1], timetable[i], lessons[i])
        else:
            day_timetable += '{} <i>{}</i>\n–í—ñ–∫–Ω–æ \U0001F483\U0001F57A\n\n'.format(emoji_numbers[i+1], timetable[i])

    return day_timetable


@bot.message_handler(commands=['ci'])
def cache_info(message):

    user = core.User(message.chat)

    if str(user.get_id()) not in settings.ADMINS_ID:
        return

    cache_items_count = len(core.Cache.get_keys() or '')

    bot.send_message(user.get_id(), 'In cache: {} units'.format(cache_items_count))


@bot.message_handler(commands=['cc'])
def clear_cache(message):

    user = core.User(message.chat)

    if str(user.get_id()) not in settings.ADMINS_ID:
        return

    core.Cache.clear_cache()

    bot.send_message(user.get_id(), '–ö–µ—à –ø–∞—Ä –±—É–≤ –æ—á–∏—â–µ–Ω–∏–π.')


@bot.message_handler(commands=['ca'])
def clear_cache_audiences(message):

    user = core.User(message.chat)

    if str(user.get_id()) not in settings.ADMINS_ID:
        return

    core.clear_cache_audiences()

    bot.send_message(user.get_id(), '–ö–µ—à —Ä–æ–∑–∫–ª–∞–¥—É –ø–æ –∞—É–¥–∏—Ç–æ—Ä—ñ—è–º –±—É–≤ –æ—á–∏—â–µ–Ω–∏–π.')


@bot.message_handler(commands=['log'])
def get_logs(message):

    user = core.User(message.chat)

    if str(user.get_id()) not in settings.ADMINS_ID:
        bot.send_message(user.get_id(), '–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É :(')
        return

    if len(message.text.split()) == 2:
        count = int(message.text.split()[1])
    else:
        count = 65

    with open(os.path.join(settings.BASE_DIR, 'bot_log.txt'), 'r', encoding="utf-8") as log_file:
        log_lines = log_file.readlines()

    logs = ''

    for line in log_lines[-count:]:
        logs += line

    bot.send_message(user.get_id(), logs, reply_markup=keyboard)


@bot.message_handler(commands=['start'])
def start_handler(message):
    sent = bot.send_message(message.chat.id, '–í—ñ—Ç–∞—é, {} üòä. –Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –¥–æ–ø–æ–º–æ–≥—Ç–∏ –í–∞–º —ñ–∑ —Ä–æ–∑–∫–ª–∞–¥–æ–º. –ó –º–æ—î—é –¥–æ–ø–æ–º–æ–≥–æ—é '
                                             '–í–∏ –∑–º–æ–∂–µ—Ç–µ —à–≤–∏–¥–∫–æ —Ç–∞ –∑—Ä—É—á–Ω–æ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Å–≤—ñ–π —Ä–æ–∑–∫–ª–∞–¥. –¢–æ–∂ –¥–ª—è –ø–æ—á–∞—Ç–∫—É '
                                             '—Ä–æ–±–æ—Ç–∏ –≤–∫–∞–∂—ñ—Ç—å —Å–≤–æ—î –ø—Ä—ñ–∑–≤–∏—â–µ '
                                             '(—ñ —Ç—ñ–ª—å–∫–∏ –ø—Ä—ñ–∑–≤–∏—â–µ)'.format(message.chat.first_name))
    bot.register_next_step_handler(sent, set_name)


@bot.callback_query_handler(func=lambda call_back: call_back.data in ('–ü–æ—Ç–æ—á–Ω–∏–π', '–ù–∞—Å—Ç—É–ø–Ω–∏–π'))
def week_schedule_handler(call_back):

    user = core.User(call_back.message.chat)
    user_name = user.get_full_name()
    req = call_back.data

    today = datetime.date.today()
    current_week_day_number = today.isoweekday()
    diff_between_saturday_and_today = 6 - current_week_day_number
    last_week_day = today + datetime.timedelta(days=diff_between_saturday_and_today)

    next_week_first_day = today + datetime.timedelta(days=diff_between_saturday_and_today + 2)
    next_week_last_day = today + datetime.timedelta(days=diff_between_saturday_and_today + 7)

    if req == '–ü–æ—Ç–æ—á–Ω–∏–π':
        timetable_data = get_timetable(teacher=user_name, sdate=today.strftime('%d.%m.%Y'),
                                       edate=last_week_day.strftime('%d.%m.%Y'), user_id=user.get_id())
    if req == '–ù–∞—Å—Ç—É–ø–Ω–∏–π':
        timetable_data = get_timetable(teacher=user_name, sdate=next_week_first_day.strftime('%d.%m.%Y'),
                                       edate=next_week_last_day.strftime('%d.%m.%Y'), user_id=user.get_id())

    timetable_for_week = ''

    if timetable_data:
        for timetable_day in timetable_data:
            timetable_for_week += render_day_timetable(timetable_day)

        bot.delete_message(chat_id=user.get_id(), message_id=call_back.message.message_id)

    elif isinstance(timetable_data, list) and not len(timetable_data):
        bot.delete_message(chat_id=user.get_id(), message_id=call_back.message.message_id)
        timetable_for_week = "–ù–∞ —Ç–∏–∂–¥–µ–Ω—å –ø–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

    else:
        return

    bot.send_message(text=timetable_for_week[:4090], chat_id=user.get_id(),
                     parse_mode="HTML", reply_markup=keyboard)


def select_teacher_from_list_reg(message):

    user = core.User(message.chat)

    msg = '–î–æ–±—Ä–µ üëç, –±—É–¥—É –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –¥–ª—è {}.'.format(message.text)
    user.update_name(message.text) if user.get_full_name() else user.registration(message.text)
    bot.send_message(message.chat.id, msg, reply_markup=keyboard, parse_mode='HTML')
    return


def set_name(message):

    user = core.User(message.chat)
    name = message.text

    if name == '–í—ñ–¥–º—ñ–Ω–∞':
        current_user_group = user.get_full_name()
        bot.send_message(message.chat.id, '–î–æ–±—Ä–µ, –∑–∞–ª–∏—à–∏–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è {}.'.format(current_user_group),
                         reply_markup=keyboard)
        return

    teachers_list = []

    try:
        with open(os.path.join(settings.BASE_DIR, 'teachers.txt'), 'r', encoding="utf-8") as file:
            all_teachers = json.loads(file.read())
    except Exception as ex:
        bot.send_message('204560928', '–ü–æ–º–∏–ª–∫–∞ –≤ —Ä–æ–±–æ—Ç—ñ –±–æ—Ç–∞. –ú–æ–∂–ª–∏–≤–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —Ñ–∞–π–ª —ñ–∑ –≤–∏–∫–ª–∞–¥–∞—á–∞–º–∏.')
        bot.send_message(message.chat.id, '–ü—ñ–¥ —á–∞—Å —Ä–æ–±–æ—Ç–∏ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –†–æ–∑—Ä–æ–±–Ω–∏–∫ –æ—Ç—Ä–∏–º–∞–≤ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.',
                         reply_markup=keyboard)
        core.log(m='–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É —ñ–∑ –≤–∏–∫–ª–∞–¥–∞—á–∞–º–∏: {}'.format(str(ex)))
        return

    for teacher in all_teachers:
        if teacher.split()[0].upper() == message.text.upper():
            teachers_list.append(teacher)

    if not teachers_list:

        sent = bot.send_message(message.chat.id, '–ù–µ –º–æ–∂—É –∑–Ω–∞–π—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á–∞ –∑ —Ç–∞–∫–∏–º –ø—Ä—ñ–∑–≤–∏—â–µ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.')
        bot.register_next_step_handler(sent, set_name)
        return

    if len(teachers_list) == 1:
        msg = '–î–æ–±—Ä–æ üëç, –±—É–¥—É –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –¥–ª—è {}.'.format(teachers_list[0])
        user.update_name(teachers_list[0]) if user.get_full_name() else user.registration(teachers_list[0])
        bot.send_message(message.chat.id, msg, reply_markup=keyboard, parse_mode='HTML')
        return

    if len(teachers_list) > 1:
        teachers_keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for teacher in teachers_list:
            teachers_keyboard.row(teacher)

        sent = bot.send_message(message.chat.id, '–í–∏–±–µ—Ä—ñ—Ç—å —ñ–∑ —Å–ø–∏—Å–∫—É:', reply_markup=teachers_keyboard)
        bot.register_next_step_handler(sent, select_teacher_from_list_reg)


def show_teachers(chat_id, name):

    in_week = datetime.date.today() + datetime.timedelta(days=7)

    in_week_day = in_week.strftime('%d.%m.%Y')
    today = datetime.date.today().strftime('%d.%m.%Y')

    rozklad_data = get_timetable(teacher=name, sdate=today, edate=in_week_day, user_id=chat_id)

    if rozklad_data:
        rozklad_for_week = '–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å —É <b>{}</b>:\n\n'.format(name)
        for rozklad_day in rozklad_data:
            rozklad_for_week += render_day_timetable(rozklad_day)
    else:
        rozklad_for_week = '–ù–∞ —Ç–∏–∂–¥–µ–Ω—å –ø–∞—Ä —É –≤–∏–∫–ª–∞–¥–∞—á–∞ <b>{}</b> –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.'.format(name)

    bot.send_message(chat_id, rozklad_for_week, reply_markup=keyboard, parse_mode='HTML')


def select_teacher_from_request(message):  # —Ñ-—è –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∫–æ–ª–∏ —î 2 —ñ –±—ñ–ª—å—à–µ –≤–∏–∫–ª–∞–¥–∞—á—ñ –∑ —Ç–∞–∫–∏–º –ø—Ä—ñ–∑–≤–∏—â–µ–º

    if message.text == '–ù–∞–∑–∞–¥':
        bot.send_message(message.chat.id, '–û–∫–µ–π)', reply_markup=keyboard)
        return

    show_teachers(message.chat.id, message.text)


def select_teachers(message):

    core.log(message.chat, '> (–ø–æ –≤–∏–∫–ª–∞–¥–∞—á—É) {}'.format(message.text))
    tchrs = []

    try:
        with open(os.path.join(settings.BASE_DIR, 'teachers.txt'), 'r', encoding="utf-8") as file:
            all_teachers = json.loads(file.read())
    except Exception as ex:
        bot.send_message(message.chat.id, '–î–∞–Ω–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ –ø—Ä–∞—Ü—é—î.', reply_markup=keyboard)
        core.log(m='Error loading teachers file: {}'.format(str(ex)))
        return

    for teacher in all_teachers:
        if teacher.split()[0].upper() == message.text.upper():
            tchrs.append(teacher)

    if not tchrs:
        bot.send_message(message.chat.id, '–ù–µ –º–æ–∂—É –∑–Ω–∞–π—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á–∞ –∑ —Ç–∞–∫–∏–º –ø—Ä—ñ–∑–≤–∏—â–µ–º. –©–æ–± —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑ –∑–Ω–æ–≤—É'
                                          ' –≤–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –ø—É–Ω–∫—Ç –º–µ–Ω—é –Ω–∞ –≤–≤–µ–¥—ñ—Ç—å –ø—Ä—ñ–∑–≤–∏—â–µ.', reply_markup=keyboard)
        return

    if len(tchrs) == 1:
        show_teachers(message.chat.id, tchrs[0])
        return

    if len(tchrs) > 1:

        teachers_keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for teacher in tchrs:
            teachers_keyboard.row(teacher)

        teachers_keyboard.row('–ù–∞–∑–∞–¥')
        sent = bot.send_message(message.chat.id, '–í–∏–±–µ—Ä–∏ –≤–∏–∫–ª–∞–¥–∞—á–∞:', reply_markup=teachers_keyboard)
        bot.register_next_step_handler(sent, select_teacher_from_request)
        return


def show_other_group(message):

    group = message.text
    core.log(message.chat, '> (–ø–æ –≥—Ä—É–ø—ñ) {}'.format(group))
    bot.send_chat_action(message.chat.id, "typing")

    if group == KEYBOARD['MAIN_MENU']:
        bot.send_message(message.chat.id, '–û–∫–µ–π', reply_markup=keyboard, parse_mode='HTML')
        return

    if not core.is_group_valid(group):

        possible_groups = core.get_possible_groups(group)
        msg = '–ì—Ä—É–ø–∏ <b>{}</b> –Ω–µ–º–∞—î –≤ –±–∞–∑—ñ —Ä–æ–∑–∫–ª–∞–¥—É.\n'.format(group)

        if possible_groups:

            msg += '<b>–ú–æ–∂–ª–∏–≤—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏:</b>\n'
            groups_kb = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)

            groups_kb.row(KEYBOARD['MAIN_MENU'])

            for group in possible_groups:
                msg += '{}\n'.format(group.get('group'))
                groups_kb.row(group.get('group'))

            sent = bot.send_message(message.chat.id, msg, parse_mode='HTML', reply_markup=groups_kb)
            bot.register_next_step_handler(sent, show_other_group)
            return

        bot.send_message(message.chat.id, msg, reply_markup=keyboard, parse_mode='HTML')
        return

    in_week = datetime.date.today() + datetime.timedelta(days=7)
    in_week_day = in_week.strftime('%d.%m.%Y')
    today = datetime.date.today().strftime('%d.%m.%Y')

    timetable_data = get_timetable(group=group, sdate=today, edate=in_week_day, user_id=message.chat.id)
    timetable_for_week = '<b>–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å –¥–ª—è –≥—Ä—É–ø–∏ {}:</b>\n\n'.format(message.text)

    if timetable_data:
        for timetable_day in timetable_data:
            timetable_for_week += render_day_timetable(timetable_day)
    elif isinstance(timetable_data, list) and not len(timetable_data):
        timetable_for_week = '–ù–∞ —Ç–∏–∂–¥–µ–Ω—å –ø–∞—Ä –¥–ª—è –≥—Ä—É–ø–∏ {} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.'.format(group)
    else:
        return

    bot.send_message(message.chat.id, timetable_for_week[:4090], parse_mode='HTML', reply_markup=keyboard)


def show_in_audience(message):

    if message.text == KEYBOARD['MAIN_MENU']:
        bot.send_message(message.chat.id, 'Ok', reply_markup=keyboard)
        return

    audience_numbers_list = []
    day_timetable = ''

    if message.text == '–í—Å—ñ':
        audience_numbers_list = ['113', '319', '320', '321', '323', '324', '325', '326', '327', '328']
    else:
        audience_numbers_list.append(message.text)

    for audience_number in audience_numbers_list:

        lessons = core.get_lesson_in_audience(audience_number)

        if not lessons:
            continue

        day_timetable += '.....::::: \U0001F4CB –ü–∞—Ä–∏ –¥–ª—è <b>{}</b> –∞—É–¥. :::::.....\n\n'.format(audience_number)

        timetable = ['9:00 - 10:20', '10:30 - 11:50', '12:10 - 13:30', '13:40 - 15:00',
                     '15:20 - 16:40 ', '16:50 - 18:10', '18:20 - 19:40', '-']

        for lesson in lessons:
            n = int(lesson['lesson_number'])
            if lessons:
                day_timetable += '{} {}\n<b>{}</b> ({}) > {} ({})\n\n'.format(emoji_numbers[n], timetable[n-1],
                                                                              lesson['group'],
                                                                              lesson['teacher'],
                                                                              lesson['title'],
                                                                              lesson['type'])

    bot.send_message(chat_id=message.chat.id, text=day_timetable, parse_mode='HTML', reply_markup=keyboard)


@app.route('/fl1/metrics')
def admin_metrics():

    all_users_count = core.MetricsManager.get_all_users_count()
    users_registered_week = core.MetricsManager.get_number_of_users_registered_during_the_week()
    active_today_users_count = core.MetricsManager.get_active_today_users_count()
    active_yesterday_users_count = core.MetricsManager.get_active_yesterday_users_count()
    active_week_users_count = core.MetricsManager.get_active_week_users_count()

    try:
        forecast_update_date = os.path.getmtime(os.path.join(settings.BASE_DIR, 'groups.txt'))
        groups_update_time = datetime.datetime.fromtimestamp(forecast_update_date).strftime('%d.%m.%Y %H:%M')
    except Exception:
        groups_update_time = '-'

    try:
        forecast_update_date = os.path.getmtime(os.path.join(settings.BASE_DIR, 'teachers.txt'))
        teachers_update_time = datetime.datetime.fromtimestamp(forecast_update_date).strftime('%d.%m.%Y %H:%M')
    except Exception:
        teachers_update_time = '-'

    metrics_values = {
        'all_users_count': all_users_count,
        'users_registered_week': users_registered_week,
        'active_today_users_count': active_today_users_count,
        'active_yesterday_users_count': active_yesterday_users_count,
        'active_week_users_count': active_week_users_count,

        'groups_update_time': groups_update_time,
        'teachers_update_time': teachers_update_time,
    }

    return render_template('metrics.html', data=metrics_values)


@app.route('/fl1/del_user', methods=['POST'])
def admin_del_user():

    data = {}

    if request.method == 'POST' and request.form.get('PWD') == request.form.get('ID') + ' 3':

        telegram_id = request.form.get('ID')

        u = core.User.get_username(telegram_id)
        core.User.delete_user(telegram_id)

        if u:
            data['message'] = '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á <b>{} {}</b> –±—É–≤ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∏–π. <br> ' \
                              '<b>–≥—Ä—É–ø–∞:</b> {}, <b>—Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è:</b> {}, ' \
                              '<b>–æ—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:</b> {}'.format(u[2], u[3] or '', u[4], u[5], u[6])
        else:
            data['message'] = '–¢–∞–∫–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.'
    else:

        data['message'] = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å'

    users = core.MetricsManager.get_users()
    data['users'] = users

    return render_template('users.html', data=data)


@app.route('/fl1/users')
def admin_users():

    data = {
        'users': core.MetricsManager.get_users()
    }

    return render_template('users.html', data=data)


@app.route('/fl1/send_message', methods=['POST'])
def admin_send_message():

    data = {}

    if request.method == 'POST' and request.form.get('pass') == request.form.get('id') + ' 2':

        telegram_id = request.form.get('id')

        data = {
            'chat_id': telegram_id,
            'parse_mode': 'HTML',
            'text': '\U0001f916 <b>–ë–æ—Ç</b>:\n\n' + str(request.form.get('text')).strip()
        }

        r = requests.get('https://api.telegram.org/bot{}/sendMessage'.format(settings.BOT_TOKEN), params=data).json()

        if r.get('ok'):
            data['message'] = '–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ'
        else:
            data['message'] = '–ü–æ–º–∏–ª–∫–∞ {}: {}'.format(r.get('error_code'), r.get('description'))

    users = core.MetricsManager.get_users()
    data['users'] = users

    return render_template('users.html', data=data)


@app.route('/fl1/statistics_by_types_during_the_week')
def statistics_by_types_during_the_week():

    stats = core.MetricsManager.get_statistics_by_types_during_the_week()

    return jsonify(data=stats)


@app.route('/fl1/last_days_statistics')
def last_days_statistics():

    days_statistics = core.MetricsManager.get_last_days_statistics()

    stats = {'labels': [], 'data': []}

    def sort_by_date(input_str):
        return datetime.datetime.strptime(input_str + '.' + str(datetime.date.today().year), '%d.%m.%Y')

    # Sorting by dates
    for day_stat in sorted(days_statistics, key=sort_by_date):

        stats['labels'].append(day_stat)
        stats['data'].append(days_statistics[day_stat])

    return jsonify(data=stats)


@app.route('/fl1/update_groups')
def admin_update_groups():

    updated = core.update_all_groups()

    if updated:
        msg = '–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø –æ–Ω–æ–≤–ª–µ–Ω–æ. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {} –≥—Ä—É–ø.<br>'.format(len(updated))
        msg += str(updated)
        return msg
    return '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ'


@app.route('/fl1/update_teachers')
def admin_update_teachers():

    updated = core.update_all_teachers()

    if updated:
        msg = '–°–ø–∏—Å–æ–∫ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {} —ñ–º–µ–Ω.<br>'.format(len(updated))
        msg += str(updated)
        return msg
    return '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ'


@app.route('/fl1/user/<user_id>')
def admin_user_statistics(user_id):

    data = {
        'user': core.User.get_userinfo_by_id(user_id),
        'actions': core.MetricsManager.get_stats_by_user_id(user_id),
    }

    return render_template('user_stat.html', data=data)


@app.route('/fl1/run')
def index():
    core.User.create_user_table_if_not_exists()
    core.MetricsManager.create_metrics_table_if_not_exists()
    core.create_audience_db_if_not_exists()
    bot.delete_webhook()
    bot.set_webhook(settings.WEBHOOK_URL + settings.WEBHOOK_PATH, max_connections=1)
    bot.send_message('204560928', 'Running...')
    core.log(m='Webhook is setting: {} by run url'.format(bot.get_webhook_info().url))
    return 'ok'


@app.route(settings.WEBHOOK_PATH, methods=['POST', 'GET'])
def webhook():
    json_string = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_string)
    bot.process_new_updates([update])

    return "!", 200


@bot.message_handler(content_types=["text"])
def main_menu(message):

    bot.send_chat_action(message.chat.id, "typing")

    user = core.User(message.chat)
    user_name = user.get_full_name()
    request = message.text

    core.log(message.chat, '> {}'.format(message.text))

    if user_name:

        def is_date_request_or_other():

            if re.search(r'^(\d{1,2})\.(\d{1,2})$', request) or \
               re.search(r'^(\d{1,2})\.(\d{1,2})-(\d{1,2})\.(\d{1,2})$', request) or \
               re.search(r'^(\d{1,2})\.(\d{1,2})\.(\d{2,4})$', request) or \
               re.search(r'^(\d{1,2})\.(\d{1,2})\.(\d{2,4})-(\d{1,2})\.(\d{1,2})\.(\d{2,4})$', request):

                return 'FOR_A_DATE'

            return 'OTHER'

        # Reversed keys and values in dictionary
        request_code = {v: k for k, v in KEYBOARD.items()}.get(request, is_date_request_or_other())
        core.MetricsManager.track(user.get_id(), request_code, user_name)

        if request == KEYBOARD['TODAY']:

            timetable_data = get_timetable(teacher=user_name, user_id=user.get_id())

            if timetable_data:
                timetable_for_today = render_day_timetable(timetable_data[0])
            elif isinstance(timetable_data, list) and not len(timetable_data):
                timetable_for_today = "–ù–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –ø–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
            else:
                return

            bot.send_message(user.get_id(), timetable_for_today, parse_mode='HTML', reply_markup=keyboard)

        elif request == KEYBOARD['TOMORROW']:  # Tomorrow

            tomorrow = datetime.date.today() + datetime.timedelta(days=1)
            tom_day = tomorrow.strftime('%d.%m.%Y')

            timetable_data = get_timetable(teacher=user_name, sdate=tom_day, edate=tom_day, user_id=user.get_id())

            if timetable_data:
                timetable_for_tomorrow = render_day_timetable(timetable_data[0])
            elif isinstance(timetable_data, list) and not len(timetable_data):
                timetable_for_tomorrow = "–ù–∞ –∑–∞–≤—Ç—Ä–∞ –ø–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
            else:
                return

            bot.send_message(user.get_id(), timetable_for_tomorrow, parse_mode='HTML', reply_markup=keyboard)

        elif request == KEYBOARD['FOR_A_WEEK']:  # For a week

            if datetime.date.today().isoweekday() in (5, 6, 7):  # –ø—Ç, —Å–±, –Ω–¥

                timetable_for_week = ''
                today = datetime.date.today()
                current_week_day_number = today.isoweekday()
                diff_between_saturday_and_today = 6 - current_week_day_number
                next_week_first_day = today + datetime.timedelta(days=diff_between_saturday_and_today + 2)
                next_week_last_day = today + datetime.timedelta(days=diff_between_saturday_and_today + 7)

                timetable_data = get_timetable(teacher=user_name, sdate=next_week_first_day.strftime('%d.%m.%Y'),
                                               edate=next_week_last_day.strftime('%d.%m.%Y'), user_id=user.get_id())

                if timetable_data:
                    for timetable_day in timetable_data:
                        timetable_for_week += render_day_timetable(timetable_day)

                elif isinstance(timetable_data, list) and not len(timetable_data):
                    timetable_for_week = "–ù–∞ —Ç–∏–∂–¥–µ–Ω—å, –∑ {} –ø–æ {} –ø–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.".format(
                        next_week_first_day.strftime('%d.%m'), next_week_last_day.strftime('%d.%m'))

                bot.send_message(text=timetable_for_week[:4090], chat_id=user.get_id(),
                                 reply_markup=keyboard, parse_mode="HTML")

                return

            week_type_keyboard = telebot.types.InlineKeyboardMarkup()
            week_type_keyboard.row(
                *[telebot.types.InlineKeyboardButton(text=name, callback_data=name) for
                  name in ["–ü–æ—Ç–æ—á–Ω–∏–π", "–ù–∞—Å—Ç—É–ø–Ω–∏–π"]]
            )

            bot.send_message(user.get_id(), '–ù–∞ —è–∫–∏–π —Ç–∏–∂–¥–µ–Ω—å?', reply_markup=week_type_keyboard)

        elif request == KEYBOARD['TIMETABLE']:

            t = ''
            t += '{} - 9:00 - 10:20\n'.format(emoji_numbers[1])
            t += '{} - 10:30 - 11:50\n'.format(emoji_numbers[2])
            t += '{} - 12:10 - 13:30\n'.format(emoji_numbers[3])
            t += '{} - 13:40 - 15:00\n'.format(emoji_numbers[4])
            t += '{} - 15:20 - 16:40 \n'.format(emoji_numbers[5])
            t += '{} - 16:50 - 18:10 \n'.format(emoji_numbers[6])
            t += '{} - 18:20 - 19:40 \n'.format(emoji_numbers[7])

            bot.send_message(user.get_id(), t, reply_markup=keyboard)

        elif request == KEYBOARD['CHANGE_NAME']:

            user_group = user.get_full_name()

            cancel_kb = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            cancel_kb.row('–í—ñ–¥–º—ñ–Ω–∞')

            msg = '–ó–±–µ—Ä–µ–∂–µ–Ω–µ —ñ–º\'—è: {}\n–©–æ–± –∑–º—ñ–Ω–∏—Ç–∏, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –ø—Ä—ñ–∑–≤–∏—â–µ'.format(user_group)

            sent = bot.send_message(message.chat.id, msg, parse_mode='HTML', reply_markup=cancel_kb)
            bot.register_next_step_handler(sent, set_name)

        elif request == KEYBOARD['HELP']:

            msg = "–î–ª—è –ø–æ—à—É–∫—É –ø–æ –¥–∞—Ç–∞–º : <b>15.05</b>, <b>15.05-22.05</b>, <b>1.1.18-10.1.18</b>\n\n" \
                  "<b>–Ü–º`—è:</b> <code> {}</code>\n\n" \
                  "<b>–ö–∞–Ω–∞–ª:</b> @zdu_news\n" \
                  "<b>–ù–æ–≤–∏–Ω–∏ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç—É:</b> @zueduua\n" \
                  "<b>–†–æ–∑—Ä–æ–±–Ω–∏–∫:</b> @Koocherov\n"

            kb = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            kb.row(KEYBOARD['MAIN_MENU'])
            kb.row(KEYBOARD['CHANGE_NAME'])

            bot.send_message(message.chat.id, msg.format(user.get_full_name()),
                             reply_markup=kb, parse_mode='HTML')

        elif request == KEYBOARD['FOR_A_GROUP']:
            sent = bot.send_message(message.chat.id,
                                    '–î–ª—è —Ç–æ–≥–æ —â–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å —Ä–æ–∑–∫–ª–∞–¥ –±—É–¥—å —è–∫–æ—ó –≥—Ä—É–ø–∏ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å –≤–≤–µ–¥—ñ—Ç—å —ó—ó –Ω–∞–∑–≤—É')
            bot.register_next_step_handler(sent, show_other_group)

        elif request == KEYBOARD['IN_AUDIENCE']:

            now_time = datetime.datetime.now().time()

            lessons_time = ({
                    'start_time': (9, 0),
                    'end_time': (10, 20)
                },
                {
                    'start_time': (10, 30),
                    'end_time': (11, 50)
                },
                {
                    'start_time': (12, 10),
                    'end_time': (13, 30)
                },
                {
                    'start_time': (13, 40),
                    'end_time': (15, 0)
                },
                {
                    'start_time': (15, 20),
                    'end_time': (16, 40)
                },
                {
                    'start_time': (16, 50),
                    'end_time': (18, 10)
                },
                {
                    'start_time': (18, 20),
                    'end_time': (19, 40)
                },
            )

            breaks_time = ({
                   'start_time': (8, 0),
                   'end_time': (9, 0)
               },
                {
                   'start_time': (10, 20),
                   'end_time': (10, 30)
               },
               {
                   'start_time': (11, 50),
                   'end_time': (12, 10)
               },
               {
                   'start_time': (13, 30),
                   'end_time': (13, 40)
               },
               {
                   'start_time': (15, 00),
                   'end_time': (15, 20)
               },
               {
                   'start_time': (16, 40),
                   'end_time': (16, 50)
               },
               {
                   'start_time': (18, 10),
                   'end_time': (18, 20)
               },
            )

            current_lesson = 0
            current_break = -1

            for i, lesson in enumerate(lessons_time):
                if datetime.time(*lesson['start_time']) <= now_time <= datetime.time(*lesson['end_time']):
                    current_lesson = i + 1
                    break

            else:
                for i, _break in enumerate(breaks_time):
                    if datetime.time(*_break['start_time']) <= now_time <= datetime.time(*_break['end_time']):
                        current_break = i
                        break
                else:
                    bot.send_message(message.chat.id, '–ß–∞—Å –≤—ñ–¥–ø–æ—á–∏–≤–∞—Ç–∏.', parse_mode='HTML', reply_markup=keyboard)
                    return

            msg = ''
            show_for_lesson = 0

            if current_lesson:
                msg = '\U0001F550 –ó–∞—Ä–∞–∑ {} –ø–∞—Ä–∞.'.format(current_lesson)
                show_for_lesson = current_lesson
            elif current_break >= 0:
                msg = '\U0001F6B6 –ó–∞—Ä–∞–∑ –ø–µ—Ä–µ—Ä–≤–∞, –¥–∞–ª—ñ {} –ø–∞—Ä–∞'.format(current_break + 1)
                show_for_lesson = current_break + 1

            msg += '\n\n'

            for audience in (319, 320, 321, 323, 324, 325, 326, 327, 328):
                lesson = core.get_lesson_in_audience(audience, show_for_lesson)

                if lesson:
                    msg += '\U0001F4BB <b>{}</b>\n'.format(audience)
                    msg += '<b>{}</b> ({}) > {} ({})\n\n'.format(lesson['group'], lesson['teacher'], lesson['title'], lesson['type'])

            bot.send_message(message.chat.id, msg, parse_mode='HTML', reply_markup=keyboard)

        elif request == KEYBOARD['FOR_A_TEACHER']:

            sent = bot.send_message(message.chat.id,
                                    '–î–ª—è —Ç–æ–≥–æ —â–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å —Ä–æ–∑–∫–ª–∞–¥ –≤–∏–∫–ª–∞–¥–∞—á–∞ –Ω–∞ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å - '
                                    '–≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ –ø—Ä—ñ–∑–≤–∏—â–µ.')
            bot.register_next_step_handler(sent, select_teachers)

        elif request == KEYBOARD['FOR_A_AUDIENCE']:

            msg = '–î–ª—è —Ç–æ–≥–æ —â–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å —Ä–æ–∑–∫–ª–∞–¥ —É –∞—É–¥–∏—Ç–æ—Ä—ñ—ó - –≤–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É —ñ–∑ —Å–ø–∏—Å–∫—É:'

            kb = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)

            kb.row(KEYBOARD['MAIN_MENU'], '113', '–í—Å—ñ')
            kb.row('319', '320', '321')
            kb.row('323', '324', '325')
            kb.row('326', '327', '328')

            sent = bot.send_message(message.chat.id, msg, reply_markup=kb)
            bot.register_next_step_handler(sent, show_in_audience)

        elif re.search(r'^(\d{1,2})\.(\d{1,2})$', request):

            date = request + '.' + str(datetime.date.today().year)
            timetable_data = get_timetable(teacher=user_name, edate=date, sdate=date, user_id=user.get_id())

            if timetable_data:
                timetable_for_date = render_day_timetable(timetable_data[0])
            elif isinstance(timetable_data, list) and not len(timetable_data):
                msg = '–©–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –¥–µ–Ω—å, –≤–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –≤ —Ç–∞–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ:' \
                      '\n<b>05.03</b> –∞–±–æ <b>5.3</b>\n–ü–æ –∫—ñ–ª—å–∫–æ–º –¥–Ω—è–º: \n<b>5.03-15.03</b>\n' \
                      '\n–î–∞—Ç–∞ –≤–≤–æ–¥–∏—Ç—å—Å—è –±–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤ (–¥–µ–Ω—å.–º—ñ—Å—è—Ü—å)<b> —Ä—ñ–∫ –≤–≤–æ–¥–∏—Ç–∏ –Ω–µ –æ–±–æ–≤\'—è–∑–∫–æ–≤–æ</b> ' \

                timetable_for_date = '–ù–∞ <b>{}</b>, –¥–ª—è <b>{}</b> –ø–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.\n\n{}'.format(date, user_name, msg)
            else:
                return

            bot.send_message(message.chat.id, timetable_for_date, parse_mode='HTML', reply_markup=keyboard)

        elif re.search(r'^(\d{1,2})\.(\d{1,2})-(\d{1,2})\.(\d{1,2})$', request):

            s_date = message.text.split('-')[0] + '.' + str(datetime.date.today().year)
            e_date = message.text.split('-')[1] + '.' + str(datetime.date.today().year)
            timetable_for_days = ''
            timetable_data = get_timetable(teacher=user_name, sdate=s_date, edate=e_date, user_id=user.get_id())

            if timetable_data:
                for timetable_day in timetable_data:
                    timetable_for_days += render_day_timetable(timetable_day)

            elif isinstance(timetable_data, list) and not len(timetable_data):
                msg = '–©–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –¥–µ–Ω—å, –≤–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –≤ —Ç–∞–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ:' \
                      '\n<b>05.03</b> –∞–±–æ <b>5.3</b>\n–ü–æ –∫—ñ–ª—å–∫–æ–º –¥–Ω—è–º: \n<b>5.03-15.03</b>\n' \
                      '\n–î–∞—Ç–∞ –≤–≤–æ–¥–∏—Ç—å—Å—è –±–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤ (–¥–µ–Ω—å.–º—ñ—Å—è—Ü—å)<b> —Ä—ñ–∫ –≤–≤–æ–¥–∏—Ç–∏ –Ω–µ –æ–±–æ–≤\'—è–∑–∫–æ–≤–æ</b> '
                timetable_for_days = '–ù–∞ <b>{} - {}</b>, –¥–ª—è <b>{}</b> –ø–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.\n\n{}'.format(s_date,
                                                                                                      e_date,
                                                                                                      user_name,
                                                                                                      msg)
            else:
                return

            bot.send_message(user.get_id(), timetable_for_days[:4090], parse_mode='HTML', reply_markup=keyboard)

        elif re.search(r'^(\d{1,2})\.(\d{1,2})\.(\d{2,4})$', request):

            date = request
            timetable_data = get_timetable(teacher=user_name, edate=date, sdate=date, user_id=user.get_id())

            if timetable_data:
                timetable_for_date = render_day_timetable(timetable_data[0])
            elif isinstance(timetable_data, list) and not len(timetable_data):
                msg = '–©–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –¥–µ–Ω—å, –≤–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –≤ —Ç–∞–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ:' \
                      '\n<b>05.03</b> –∞–±–æ <b>5.3</b>\n–ü–æ –∫—ñ–ª—å–∫–æ–º –¥–Ω—è–º: \n<b>5.03-15.03</b>\n' \
                      '\n–î–∞—Ç–∞ –≤–≤–æ–¥–∏—Ç—å—Å—è –±–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤ (–¥–µ–Ω—å.–º—ñ—Å—è—Ü—å)<b> —Ä—ñ–∫ –≤–≤–æ–¥–∏—Ç–∏ –Ω–µ –æ–±–æ\'—è–∑–∫–æ–≤–æ</b> ' \

                timetable_for_date = '–ù–∞ <b>{}</b>, –¥–ª—è <b>{}</b> –ø–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.\n\n{}'.format(date,
                                                                                                 user_name,
                                                                                                 msg)
            else:
                return

            bot.send_message(message.chat.id, timetable_for_date, parse_mode='HTML', reply_markup=keyboard)

        elif re.search(r'^(\d{1,2})\.(\d{1,2})\.(\d{2,4})-(\d{1,2})\.(\d{1,2})\.(\d{2,4})$', request):

            s_date = request.split('-')[0]
            e_date = request.split('-')[1]
            timetable_for_days = ''
            timetable_data = get_timetable(teacher=user_name, sdate=s_date, edate=e_date, user_id=user.get_id())

            if timetable_data:
                for timetable_day in timetable_data:
                    timetable_for_days += render_day_timetable(timetable_day)

            elif isinstance(timetable_data, list) and not len(timetable_data):
                msg = '–©–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –¥–µ–Ω—å, –≤–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –≤ —Ç–∞–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ:' \
                      '\n<b>05.03</b> –∞–±–æ <b>5.3</b>\n–ü–æ –∫—ñ–ª—å–∫–æ–º –¥–Ω—è–º: \n<b>5.03-15.03</b>\n' \
                      '\n–î–∞—Ç–∞ –≤–≤–æ–¥–∏—Ç—å—Å—è –±–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤ (–¥–µ–Ω—å.–º—ñ—Å—è—Ü—å)<b> —Ä—ñ–∫ –≤–≤–æ–¥–∏—Ç–∏ –Ω–µ –æ–±–æ–≤`—è–∑–∫–æ–≤–æ</b> '
                timetable_for_days = '–ù–∞ <b>{} - {}</b>, –¥–ª—è <b>{}</b> –ø–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.\n\n{}'.format(s_date,
                                                                                                      e_date,
                                                                                                      user_name,
                                                                                                      msg)
            else:
                return

            bot.send_message(user.get_id(), timetable_for_days, parse_mode='HTML', reply_markup=keyboard)

        elif request == KEYBOARD['MAIN_MENU']:
            bot.send_message(user.get_id(), '–û–∫', reply_markup=keyboard)

        else:
            answers = ['–º?', '—Ö–º.. \U0001F914', '–Ω–µ —Ä–æ–∑—É–º—ñ—é(', '–≤–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–µ –≤ –º–µ–Ω—é']
            bot.send_message(user.get_id(), random.choice(answers), reply_markup=keyboard)

    else:
        bot.send_message(user.get_id(), '–î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –≤–≤–µ–¥—ñ—Ç—å /start')


def main():

    core.User.create_user_table_if_not_exists()
    core.Cache.create_cache_table_if_not_exists()
    core.MetricsManager.create_metrics_table_if_not_exists()
    core.create_audience_db_if_not_exists()

    bot.delete_webhook()

    if settings.USE_WEBHOOK:
        try:
            bot.set_webhook(settings.WEBHOOK_URL + settings.WEBHOOK_PATH, max_connections=1)
            core.log(m='–í–µ–±—Ö—É–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {}'.format(bot.get_webhook_info().url))

        except Exception as ex:
            core.log(m='–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —É—Å—Ç—ñ–Ω–æ–≤—Ü—ñ –≤–µ–± —Ö—É–∫–∞: {}'.format(str(ex)))

    try:
        core.log(m='Running..')
        bot.polling(none_stop=True, interval=settings.POLLING_INTERVAL)

    except Exception as ex:

        core.log(m='–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–æ–±–æ—Ç–∏: {}\n'.format(str(ex)))
        bot.stop_polling()

        if settings.SEND_ERRORS_TO_ADMIN:
            for admin in settings.ADMINS_ID:
                data = {
                    'chat_id': admin,
                    'text': '–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫.\n {}'.format(str(ex))
                }

                requests.get('https://api.telegram.org/bot{}/sendMessage'.format(settings.BOT_TOKEN), params=data)


if __name__ == "__main__":
    app.run(debug=True) if len(sys.argv) > 1 else main()
